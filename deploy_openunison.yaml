- name: deploy certmanager
  shell: kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.3/cert-manager.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf




- name: copy ca secret
  copy:
    src: ./ca-cert-secret.yaml
    dest: /root/ca-cert-secret.yaml
    mode: u=rwx,g=rwx

- name: create ca secret
  shell: kubectl apply -f /root/ca-cert-secret.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: copy ca definition
  copy:
    src: ./certmanager-ca.yaml
    dest: /root/certmanager-ca.yaml
    mode: u=rwx,g=rwx



- name: rancher local path provisioning
  shell: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.16/deploy/local-path-storage.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf


- name: mysql client
  apt:
    name: "mysql-client"

- name: helm
  shell: snap install helm --classic

- name: set default storage class
  shell: "kubectl patch storageclass local-path -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

#- name: create mariadb dir
#  file:
#    path: /data/mariadb
#    state: directory
#    mode: '777'

- name: copy mariadb yaml
  copy:
    src: ./mariadb_k8s.yaml
    dest: /root/mariadb_k8s.yaml
    mode: u=rw,g=rw

- name: deploy mariadb
  shell: kubectl apply -f /root/mariadb_k8s.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: copy db test script
  copy:
    src: ./test_mariadb_ready2.sh
    dest: /root/test_mariadb_ready2.sh
    mode: u=rwx,g=rwx

- name: wait for mariadb
  #shell: timeout 2m until kubectl exec -ti -n mariadb $(kubectl get pods -n mariadb -o json | jq -r .items[0].metadata.name) -- bash -c 'mysql -u root --password=start123 -e "SELECT 1;"'; do echo 'not ready' sleep 1; done; echo 'ready'
  shell: timeout 10m bash -c '/root/test_mariadb_ready2.sh'
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
    PATH: "$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"

#- name: create unison database
#  shell: kubectl exec -ti -n mariadb $(kubectl get pods -n mariadb -o json | jq -r .items[0].metadata.name) -- bash -c 'mysql -u root --password=start123 -e "create database unison;"'
#  environment:
#    KUBECONFIG: /etc/kubernetes/admin.conf

- name: create smtp black hole namespace
  shell: kubectl create ns blackhole
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: create smtp black hole deployment
  shell: kubectl create deployment blackhole --image=tremolosecurity/smtp-blackhole -n blackhole
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: create smtp black hole service
  shell: kubectl expose deployment/blackhole --type=ClusterIP --port 1025 --target-port=1025 -n blackhole
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: create the openunison namespace
  shell: kubectl create ns openunison
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: create ca 
  shell: kubectl apply -f /root/certmanager-ca.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: template external certificate
  template:
    src: ./external-cert.yaml
    dest: /root/external-cert.yaml

- name: create the external certificate
  shell: kubectl create -f /root/external-cert.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf    

- name: add tremolo helm repo
  shell: helm repo add tremolo https://nexus.tremolo.io/repository/helm/
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: update helm
  shell: helm repo update
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: deploy the operator
  shell: helm install openunison tremolo/openunison-operator --namespace openunison
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: template openunison source secret
  template:
    src: ./openunison-secrets.yaml
    dest: /root/openunison-secrets.yaml

- name: create secret
  shell: kubectl create -f /root/openunison-secrets.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: template openunison values.yaml
  template:
    src: ./openunison-values.yaml
    dest: /root/openunison-values.yaml

- name: deploy openunison helmchart 
  shell: helm install orchestra tremolo/openunison-k8s-activedirectory --namespace openunison -f /root/openunison-values.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: copy audit policy file
  copy:
    src: ./k8s-audit-policy.yaml
    dest: /root/k8s-audit-policy.yaml

- name: copy pod security policies
  copy:
    src: ./podsecuritypolicies.yaml
    dest: /root/podsecuritypolicies.yaml
    